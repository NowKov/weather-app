{"ast":null,"code":"var _jsxFileName = \"D:\\\\NewFolder\\\\React\\\\app-weather\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { API, GEO_API } from \"./API.js\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [search, setSearch] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const searchPressed = () => {\n    return fetch(`${GEO_API.url}&namePrefix=${search}`, GEO_API).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name} ${city.countryCode}`\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434\",\n          onChange: e => setSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: searchPressed,\n          children: \"\\u041F\\u043E\\u0438\\u0441\\u043A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bB3PeVQSnCTCsi+O6OqtIhMxfyA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["API","GEO_API","useState","jsxDEV","_jsxDEV","App","_s","search","setSearch","weather","setWeather","searchPressed","fetch","url","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/NewFolder/React/app-weather/src/App.js"],"sourcesContent":["// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { API, GEO_API } from \"./API.js\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const searchPressed = () => {\n    return fetch(`${GEO_API.url}&namePrefix=${search}`, GEO_API)\n      .then((response) => response.json())\n      .then((response) => {\n        return {\n          options: response.data.map((city) => {\n            return {\n              value: `${city.latitude} ${city.longitude}`,\n              label: `${city.name} ${city.countryCode}`,\n            };\n          }),\n        };\n      })\n      .catch((err) => console.error(err));\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* Header */}\n        <h1>Weather</h1>\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Введите город\"\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <button onClick={searchPressed}>Поиск</button>\n        </div>\n\n        {/* Location */}\n        {/* <p>{weather.name}</p> */}\n        {/* Temperature */}\n        {/* <p>{weather.main.temp}°C</p> */}\n        {/* Condition */}\n        {/* <p>{weather.weather[0].main}</p> */}\n        {/* <p>{weather.weather[0].description}</p> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAO,WAAW;AAClB,SAASA,GAAG,EAAEC,OAAO,QAAQ,UAAU;AACvC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAMS,aAAa,GAAGA,CAAA,KAAM;IAC1B,OAAOC,KAAK,CAAC,GAAGX,OAAO,CAACY,GAAG,eAAeN,MAAM,EAAE,EAAEN,OAAO,CAAC,CACzDa,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO;QACLE,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;UACnC,OAAO;YACLC,KAAK,EAAE,GAAGD,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACG,SAAS,EAAE;YAC3CC,KAAK,EAAE,GAAGJ,IAAI,CAACK,IAAI,IAAIL,IAAI,CAACM,WAAW;UACzC,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACvC,CAAC;EACD,oBACExB,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB5B,OAAA;MAAQ2B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAE5B5B,OAAA;QAAA4B,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBhC,OAAA;QAAA4B,QAAA,gBACE5B,OAAA;UACEiC,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,2EAAe;UAC3BC,QAAQ,EAAGC,CAAC,IAAKhC,SAAS,CAACgC,CAAC,CAACC,MAAM,CAACpB,KAAK;QAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACFhC,OAAA;UAAQsC,OAAO,EAAE/B,aAAc;UAAAqB,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC9B,EAAA,CA1CQD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}